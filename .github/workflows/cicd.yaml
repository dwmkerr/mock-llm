name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  packages: write

env:
  NODE_VERSION: "24.x"

jobs:
  build-and-test:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Validate NPM package
        run: |
          npm install
          npm run lint
          npm run build
          npm test

      - name: Test Samples
        run: |
          npm run test:samples

      - name: Upload unit test coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./artifacts/coverage/lcov.info
          flags: unittests
          fail_ci_if_error: false

      - name: Upload sample test coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./artifacts/coverage-samples/lcov.info
          flags: samples
          fail_ci_if_error: false

      - uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Validate Helm chart
        run: |
          helm lint chart
          helm template test-release chart

  e2e-k8s-test:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup K3s cluster
        uses: jupyterhub/action-k3s-helm@v4
        with:
          k3s-channel: latest
          metrics-enabled: false
          traefik-enabled: false

      - name: Install devspace and deploy
        run: |
          curl -L -o devspace "https://github.com/loft-sh/devspace/releases/latest/download/devspace-linux-amd64"
          sudo install -c -m 0755 devspace /usr/local/bin
          devspace deploy
          kubectl get pods
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=mock-llm --timeout=120s

      - name: Install dependencies
        run: npm install

      - name: Run sample tests against K8s deployment
        run: |
          set +e
          kubectl port-forward service/mock-llm 6556:6556 &
          PID=$!
          sleep 5
          # DISABLE_START_SERVER=1 prevents test suite from starting its own server
          # allowing it to test against the K8s deployed service
          DISABLE_START_SERVER=1 npm run test:samples
          EXIT_CODE=$?
          kill $PID || true
          exit $EXIT_CODE

  release:
    needs: [build-and-test]
    runs-on: ubuntu-24.04
    if: github.ref == 'refs/heads/main'
    outputs:
      released: ${{ steps.release-please.outputs.release_created }}
      tag: ${{ steps.release-please.outputs.tag_name }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release-please
        with:
          config-file: .github/release-please-config.json
          manifest-file: .github/release-please-manifest.json

  publish-npm:
    needs: [release]
    if: ${{ needs.release.outputs.released }}
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Install
        run: npm install

      - name: Build
        run: npm run build

      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-docker:
    needs: [release]
    if: ${{ needs.release.outputs.released }}
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: |
          VERSION=${{ needs.release.outputs.tag }}
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/mock-llm:${{ steps.version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/mock-llm:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  publish-helm:
    needs: [release]
    if: ${{ needs.release.outputs.released }}
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: |
          VERSION=${{ needs.release.outputs.tag }}
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Package and push Helm chart
        run: |
          helm package ./chart
          helm push mock-llm-${{ steps.version.outputs.version }}.tgz oci://ghcr.io/${{ github.repository_owner }}/charts
